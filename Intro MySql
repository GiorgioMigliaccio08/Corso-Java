import java.sql.Connection;
import java.sql.DriverManager;

public class TestMySQL {

	public static void main(String[] args) {
		
		try {
			// Load the MySQL JDBC driver
			Class.forName("com.mysql.cj.jdbc.Driver"); // Questo comando carica il driver JDBC per MySQL
			
			// Se arriviamo qui, significa che il driver è stato caricato correttamente
			// Altrimenti verrebbe sollevata un'eccezione e scaterebbe il blocco catch
			
			// Per connetterci al database, dobbiamo creare una stringa di connessione
			// la strnga è costituita così: jdbc:mysql://<host>:<port>/<database_name>
			
			String url = "jdbc:mysql://localhost:3306/azienda";
			String user = "root";
			String password = "";
			Connection connection = DriverManager.getConnection(url, user, password);
			// Se arriviamo qui, significa che la connessione è stata stabilita correttamente
			System.out.println("CONNESSIONE RIUSCITA!!!");

			
			connection.close(); // Chiudiamo la connessione al database

		} catch (Exception e) {
			// Handle any errors that may have occurred
			System.out.println("Errore... più nel dettaglio: " + e.getMessage());
		}
	}

}

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class TestMySQL {

	public static void main(String[] args) {
		
		try {
			// Load the MySQL JDBC driver
			Class.forName("com.mysql.cj.jdbc.Driver"); // Questo comando carica il driver JDBC per MySQL
			
			// Se arriviamo qui, significa che il driver è stato caricato correttamente
			// Altrimenti verrebbe sollevata un'eccezione e scaterebbe il blocco catch
			
			// Per connetterci al database, dobbiamo creare una stringa di connessione
			// la strnga è costituita così: jdbc:mysql://<host>:<port>/<database_name>
			
			String url = "jdbc:mysql://localhost:3306/azienda";
			String user = "root";
			String password = "";
			Connection connection = DriverManager.getConnection(url, user, password);
			// Se arriviamo qui, significa che la connessione è stata stabilita correttamente
			System.out.println("CONNESSIONE RIUSCITA!!!");
			
			// Eseguiamo una query di test per verificare la connessione
			// Facciamo una select * from dipendenti
			// Creiamo un oggetto Statement per eseguire la query
			// Uno Statement è un oggetto che ci permette di eseguire query SQL
			// Lo possiamo inseire con
			// java.sql.Statement statement = connection.createStatement();
			// oppure importando java.sql.Statement
			// così da poter scrivere direttamente
			// Statement statement = connection.createStatement();
			// statement.executeQuery("SELECT * FROM dipendenti");
			
			Statement statement = connection.createStatement();
			
			// Per ricevere i dati ci serve un ResultSet
			
			ResultSet rs; // Qui dento ci faremo finire i dati che ci interessano
			
			// Eseguiamo la query
			
			
			rs = statement.executeQuery("SELECT * FROM dipendenti");
			/* Adesso: 
                         - SE rs è NULL, vuol dire che qualcosa è proprio andato storto...
                         - SE rs non è NULL ma non contiene righe, vuol dire che non ci sono dati
                 Quindi prima veidamo se è NULL, perchè in tal caso è meglio non continuare proprio e avvertire dell'errore
			 
			 
			 */
			
			if (rs == null) {
				
				System.out.println("Errore: problema con MYSQL");
				return;
			}
			
			// Se arriviamo qui rd non è NULL, quindi possiamo continuare
			
			// ora... Quando eseguiamo una select non sappiamo quanti risultati ci sono.
			// Non sappiamo nemmeno se ci sono risultati. Per esempio la tabella potrebbe essere vuota.
			
			// Esiste un comando dentro il nostro ResultSet rs ora che ci permette di sapere se ci sono risultati e peraltro ci posiziona proprio sui risultati.
			// Infatti al momento non possiamo accedere ai dati, perchè non siamo "posizionati" su di essi.

            // Nel momento in cui eseguiamo una query di questo tipo,
			// vengono caricati i risultati (0 righe, 1 riga, 2 righe, ecc...) in un oggetto dentro ResultSet rs.
			// E poi c'è una sorta di "PUNTATORE" che punta alla riga 1, 2, 3, ecc...
			// All'inizio NON PUNTA A NESSUNA RIGA
			
			// per accedere ai dati della prima riga dobbiamo iniziare a "scorrere" le righe, posizionandoci sulla PROSSIMA!
			// ogni volta che ci posizioneremo sulla PROSSIMA riga, il puntatore si sposterà sulla riga successiva.
			// La prima volta che ci posizioniamo sulla PROSSIMA (e staresmo intanto su NESSUNA), ci posizioniamo sulla prima riga.
			// CON rs.next(); // ci posizioniamo sulla prima riga o comunque sulla PROSSIMA
			
			// SE non ci sono righe, il comando rs.next() restituirà false.
			// SE ci sono righe, il comando rs.next() restituirà true.
			// DOPO il comando rs.next(), se ha restituito true il puntatore sarà posizionato sulla prossima riga (la 1, la 2, ecc...).
			
			// Da quel momento potremo accedere ai dati...
			// Ma allora se è così potremmo fare un ciclo while per scorrere tutte le righe.
			int i = 0; // Contatore righe
			while (rs.next()) // finchè rs.next() da true, saremo nel ciclo e saremo sulla prossima riga..
			{
				i++; // Incrementiamo il contatore righe
				// Ora accediamo ai dati... siamo sull x-ma riga
				// Dobbamo conoscere la tabella e i suoi campi
				int id = rs.getInt("id"); // id è il nome del campo
				String nome = rs.getString("nome"); // nome è il nome del campo
				String cognome = rs.getString("cognome"); // cognome è il nome del campo
				String email = rs.getString("email"); // email è il nome del campo
				double stipendio = rs.getDouble("stipendio"); // stipendio è il nome del campo
				
				// Ora possiamo stampare i dati
				System.out.println("Riga: " + i); // Stampo il numero di riga
				System.out.println("ID: " + id);
				System.out.println("Nome: " + nome);
				System.out.println("Cognome: " + cognome);
				System.out.println("Email: " + email);
				System.out.println("Stipendio: " + stipendio);
				System.out.println("-------------------------------");
			}
			

			
			connection.close(); // Chiudiamo la connessione al database

		} catch (Exception e) {
			// Handle any errors that may have occurred
			System.out.println("Errore... più nel dettaglio: " + e.getMessage());
		}
	}

}

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

import classiMie.Menu;
import classiMie.IO;

public class TestMySQL {

	public static void main(String[] args) {
		
		try {
				Statement statement;
				ResultSet rs;
				Connection connection;
				int scelta;
				
				// Load the MySQL JDBC driver
				Class.forName("com.mysql.cj.jdbc.Driver"); // Questo comando carica il driver JDBC per MySQL
							
				String url = "jdbc:mysql://localhost:3306/azienda";
				String user = "root";
				String password = "";
				connection = DriverManager.getConnection(url, user, password);
				IO.println("CONNESSIONE RIUSCITA!!!");
				
				
				Menu menu = new Menu();
				menu.add("1. Visualizza dipendenti");
				menu.add("2. Aggiungi dipendente");
				menu.add("3. Esci");
				do {
							scelta = menu.executeMenu();
							
							switch (scelta) {
							case 1: // Visualizza dipendenti
								
										statement = connection.createStatement();
										
										
										rs = statement.executeQuery("SELECT * FROM dipendenti");
										if (rs == null) {
											
											IO.println("Errore: problema con MYSQL");
											return;
										}
										
										int i = 0; // Contatore righe
										while (rs.next()) // finchè rs.next() da true, saremo nel ciclo e saremo sulla prossima riga..
										{
											i++; // Incrementiamo il contatore righe
											// Ora accediamo ai dati... siamo sull x-ma riga
											// Dobbamo conoscere la tabella e i suoi campi
											int id = rs.getInt("id"); // id è il nome del campo
											String nome = rs.getString("nome"); // nome è il nome del campo
											String cognome = rs.getString("cognome"); // cognome è il nome del campo
											String email = rs.getString("email"); // email è il nome del campo
											double stipendio = rs.getDouble("stipendio"); // stipendio è il nome del campo
											
											// Ora possiamo stampare i dati
											IO.println("Riga: " + i); // Stampo il numero di riga
											IO.println("ID: " + id);
											IO.println("Nome: " + nome);
											IO.println("Cognome: " + cognome);
											IO.println("Email: " + email);
											IO.println("Stipendio: " + stipendio);
											IO.println("-------------------------------");
										}
								
								
								break;
							case 2: // Aggiungi dipendente
								
									String nome = IO.getString("Inserisci il nome del dipendente: ");
									String cognome = IO.getString("Inserisci il cognome del dipendente: ");
									String email = IO.getString("Inserisci l'email del dipendente: ");
									double stipendio = IO.getDouble("Inserisci lo stipendio del dipendente: ");
									
									statement = connection.createStatement();
									String sql = "INSERT INTO dipendenti (nome, cognome, email, stipendio) VALUES ('" + nome + "', '" + cognome + "', '" + email + "', '" + stipendio + "')";
									int rowsInserted = statement.executeUpdate(sql);
									if (rowsInserted > 0) {
										IO.println("Dipendente aggiunto con successo!");
									} else {
										IO.println("Errore: dipendente non aggiunto");
									}
								
								
								break;
							case 3: // Esci
								IO.println("Uscita dal programma..."); // Messaggio di chiusura");
								break;
							default:
								IO.println("Scelta non valida");
							}
							
					        IO.getString("Premi invio per continuare...");	
							
				} while (scelta != menu.count()); // Finchè non scegliamo di uscire
				
				connection.close(); // Chiudiamo la connessione al database
				
				IO.println("Arrivederci!"); // Messaggio di chiusura");
				

			
			

		} catch (Exception e) {
			// Handle any errors that may have occurred
			IO.println("Errore... più nel dettaglio: " + e.getMessage());
		}
	}

}

public class TestMySQLuno {

	public static void main(String[] args) {
		
		try {
			// Load the MySQL JDBC driver
			Class.forName("com.mysql.cj.jdbc.Driver"); // Questo comando carica il driver JDBC per MySQL
			
			// Se arriviamo qui, significa che il driver è stato caricato correttamente
			// Altrimenti verrebbe sollevata un'eccezione e scaterebbe il blocco catch
			
			// Per connetterci al database, dobbiamo creare una stringa di connessione
			// la strnga è costituita così: jdbc:mysql://<host>:<port>/<database_name>
			
			String url = "jdbc:mysql://localhost:3306/azienda";
			String user = "root";
			String password = "";
			Connection connection = DriverManager.getConnection(url, user, password);
			// Se arriviamo qui, significa che la connessione è stata stabilita correttamente
			System.out.println("CONNESSIONE RIUSCITA!!!");

			
			connection.close(); // Chiudiamo la connessione al database

		} catch (Exception e) {
			// Handle any errors that may have occurred
			System.out.println("Errore... più nel dettaglio: " + e.getMessage());
		}
	}

}